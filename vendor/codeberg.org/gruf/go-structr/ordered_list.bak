package structr

import "sync"

type Timeline[StructType any, PK comparable] struct {

	// hook functions.
	pkey func(StructType) PK
	gte  func(PK, PK) bool
	lte  func(PK, PK) bool
	copy func(StructType) StructType

	// main underlying
	// ordered item list.
	list list

	// indices used in storing passed struct
	// types by user defined sets of fields.
	indices []Index

	// protective mutex, guards:
	// - TODO
	mutex sync.Mutex
}

func (t *Timeline[T, PK]) Init(config any) {

}

func (t *Timeline[T, PK]) Index(name string) *Index {
	for i := range t.indices {
		if t.indices[i].name == name {
			return &t.indices[i]
		}
	}
	panic("unknown index: " + name)
}

func (t *Timeline[T, PK]) Insert(values ...T) {

}

func (t *Timeline[T, PK]) LoadTop(min, max PK, length int, load func(min, max PK, length int) ([]T, error)) ([]T, error) {
	// Allocate expected no. values.
	values := make([]T, 0, length)

	// Acquire lock.
	t.mutex.Lock()

	// Wrap unlock to only do once.
	unlock := once(t.mutex.Unlock)
	defer unlock()

	// Check init'd.
	if t.copy == nil {
		panic("not initialized")
	}

	// Iterate through linked list from top (i.e. head).
	for next := t.list.head; next != nil; next = next.next {

		// Check if we've gathered
		// enough values from timeline.
		if len(values) >= length {
			return values, nil
		}

		item := (*indexed_item)(next.data)
		value := item.data.(T)
		pkey := t.pkey(value)

		// Check if below min.
		if t.lte(pkey, min) {
			continue
		}

		// Update min.
		min = pkey

		// Check if above max.
		if t.gte(pkey, max) {
			break
		}

		// Append value copy.
		value = t.copy(value)
		values = append(values, value)
	}
}

func (t *Timeline[T, PK]) LoadBottom(min, max PK, length int, load func(min, max PK, length int) ([]T, error)) ([]T, error) {
	// Allocate expected no. values.
	values := make([]T, 0, length)

	// Acquire lock.
	t.mutex.Lock()

	// Wrap unlock to only do once.
	unlock := once(t.mutex.Unlock)
	defer unlock()

	// Check init'd.
	if t.copy == nil {
		panic("not initialized")
	}

	// Iterate through linked list from bottom (i.e. tail).
	for next := t.list.tail; next != nil; next = next.prev {

		// Check if we've gathered
		// enough values from timeline.
		if len(values) >= length {
			return values, nil
		}

		item := (*indexed_item)(next.data)
		value := item.data.(T)
		pkey := t.pkey(value)

		// Check if above max.
		if t.gte(pkey, max) {
			continue
		}

		// Update max.
		max = pkey

		// Check if below min.
		if t.lte(pkey, min) {
			break
		}

		// Append value copy.
		value = t.copy(value)
		values = append(values, value)
	}

	// Done with
	// the lock.
	unlock()

	// Attempt to load values up to given length.
	next, err := load(min, max, length-len(values))
	if err != nil {
		return nil, err
	}

	// Acquire lock.
	t.mutex.Lock()

	// Store uncached values.
	for i := range next {
		t.store_value(
			nil, "",
			uncached[i],
		)
	}

	// Done with lock.
	t.mutex.Unlock()

	// Append uncached to return values.
	values = append(values, next...)

	return values, nil
}

func (t *Timeline[T, PK]) index(value T) *indexed_item {
	pk := t.pkey(value)

	switch {
	case t.list.len == 0:

	case pk < t.list.head.data:
	}
}

func (t *Timeline[T, PK]) delete(item *indexed_item) {

}
