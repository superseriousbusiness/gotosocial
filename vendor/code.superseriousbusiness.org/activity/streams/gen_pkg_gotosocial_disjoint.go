// Code generated by astool. DO NOT EDIT.

package streams

import (
	typeannounceapproval "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_announceapproval"
	typeannounceauthorization "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_announceauthorization"
	typeannouncerequest "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_announcerequest"
	typecanannounce "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_canannounce"
	typecanlike "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_canlike"
	typecanquote "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_canquote"
	typecanreply "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_canreply"
	typeinteractionpolicy "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_interactionpolicy"
	typelikeapproval "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_likeapproval"
	typelikeauthorization "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_likeauthorization"
	typelikerequest "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_likerequest"
	typereplyapproval "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_replyapproval"
	typereplyauthorization "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_replyauthorization"
	typereplyrequest "code.superseriousbusiness.org/activity/streams/impl/gotosocial/type_replyrequest"
	vocab "code.superseriousbusiness.org/activity/streams/vocab"
)

// GoToSocialAnnounceApprovalIsDisjointWith returns true if AnnounceApproval is
// disjoint with the other's type.
func GoToSocialAnnounceApprovalIsDisjointWith(other vocab.Type) bool {
	return typeannounceapproval.AnnounceApprovalIsDisjointWith(other)
}

// GoToSocialAnnounceAuthorizationIsDisjointWith returns true if
// AnnounceAuthorization is disjoint with the other's type.
func GoToSocialAnnounceAuthorizationIsDisjointWith(other vocab.Type) bool {
	return typeannounceauthorization.AnnounceAuthorizationIsDisjointWith(other)
}

// GoToSocialAnnounceRequestIsDisjointWith returns true if AnnounceRequest is
// disjoint with the other's type.
func GoToSocialAnnounceRequestIsDisjointWith(other vocab.Type) bool {
	return typeannouncerequest.AnnounceRequestIsDisjointWith(other)
}

// GoToSocialCanAnnounceIsDisjointWith returns true if CanAnnounce is disjoint
// with the other's type.
func GoToSocialCanAnnounceIsDisjointWith(other vocab.Type) bool {
	return typecanannounce.CanAnnounceIsDisjointWith(other)
}

// GoToSocialCanLikeIsDisjointWith returns true if CanLike is disjoint with the
// other's type.
func GoToSocialCanLikeIsDisjointWith(other vocab.Type) bool {
	return typecanlike.CanLikeIsDisjointWith(other)
}

// GoToSocialCanQuoteIsDisjointWith returns true if CanQuote is disjoint with the
// other's type.
func GoToSocialCanQuoteIsDisjointWith(other vocab.Type) bool {
	return typecanquote.CanQuoteIsDisjointWith(other)
}

// GoToSocialCanReplyIsDisjointWith returns true if CanReply is disjoint with the
// other's type.
func GoToSocialCanReplyIsDisjointWith(other vocab.Type) bool {
	return typecanreply.CanReplyIsDisjointWith(other)
}

// GoToSocialInteractionPolicyIsDisjointWith returns true if InteractionPolicy is
// disjoint with the other's type.
func GoToSocialInteractionPolicyIsDisjointWith(other vocab.Type) bool {
	return typeinteractionpolicy.InteractionPolicyIsDisjointWith(other)
}

// GoToSocialLikeApprovalIsDisjointWith returns true if LikeApproval is disjoint
// with the other's type.
func GoToSocialLikeApprovalIsDisjointWith(other vocab.Type) bool {
	return typelikeapproval.LikeApprovalIsDisjointWith(other)
}

// GoToSocialLikeAuthorizationIsDisjointWith returns true if LikeAuthorization is
// disjoint with the other's type.
func GoToSocialLikeAuthorizationIsDisjointWith(other vocab.Type) bool {
	return typelikeauthorization.LikeAuthorizationIsDisjointWith(other)
}

// GoToSocialLikeRequestIsDisjointWith returns true if LikeRequest is disjoint
// with the other's type.
func GoToSocialLikeRequestIsDisjointWith(other vocab.Type) bool {
	return typelikerequest.LikeRequestIsDisjointWith(other)
}

// GoToSocialReplyApprovalIsDisjointWith returns true if ReplyApproval is disjoint
// with the other's type.
func GoToSocialReplyApprovalIsDisjointWith(other vocab.Type) bool {
	return typereplyapproval.ReplyApprovalIsDisjointWith(other)
}

// GoToSocialReplyAuthorizationIsDisjointWith returns true if ReplyAuthorization
// is disjoint with the other's type.
func GoToSocialReplyAuthorizationIsDisjointWith(other vocab.Type) bool {
	return typereplyauthorization.ReplyAuthorizationIsDisjointWith(other)
}

// GoToSocialReplyRequestIsDisjointWith returns true if ReplyRequest is disjoint
// with the other's type.
func GoToSocialReplyRequestIsDisjointWith(other vocab.Type) bool {
	return typereplyrequest.ReplyRequestIsDisjointWith(other)
}
